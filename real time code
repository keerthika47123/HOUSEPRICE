# Streamlit App: Real-Time House Price Prediction

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load the trained model
model = joblib.load("house_price_predictor.pkl")

# UI - Sidebar Inputs
st.title("🏡 Real-Time House Price Predictor")
st.write("Fill in the property details below to get an estimated house price.")

# Input fields
gr_liv_area = st.number_input("Living Area (in sq. ft)", value=1500)
overall_qual = st.selectbox("Overall Quality (1-10)", list(range(1, 11)), index=7)
year_built = st.number_input("Year Built", value=2000, min_value=1900, max_value=2025)
neighborhood = st.selectbox("Neighborhood", [
    "CollgCr", "Veenker", "Crawfor", "NoRidge", "Mitchel", "Somerst",
    "NWAmes", "OldTown", "BrkSide", "Sawyer", "NridgHt", "NAmes"
])
recent_trend = st.slider("Recent Price Trend (%)", -5.0, 5.0, 0.0, step=0.1)
property_tax = st.number_input("Annual Property Tax (USD)", value=2500)
crime_rate = st.slider("Crime Rate (1=Low, 10=High)", 1.0, 10.0, 5.0)
school_rating = st.slider("School Rating (1=Low, 10=High)", 1, 10, 7)
distance_to_city = st.slider("Distance to City Center (km)", 0.5, 30.0, 5.0, step=0.5)

# Feature engineering
price_per_sqft = gr_liv_area and 1 or 0  # default to 1 if gr_liv_area > 0

# Create DataFrame from inputs
input_df = pd.DataFrame({
    "GrLivArea": [gr_liv_area],
    "OverallQual": [overall_qual],
    "YearBuilt": [year_built],
    "Neighborhood": [neighborhood],
    "RecentPriceTrend": [recent_trend],
    "PropertyTax": [property_tax],
    "CrimeRate": [crime_rate],
    "SchoolRating": [school_rating],
    "Price_per_sqft": [price_per_sqft],
    "Distance_to_city": [distance_to_city]
})

# Predict button
if st.button("Predict House Price"):
    try:
        prediction = model.predict(input_df)
        st.success(f"Estimated House Price: ₹ {prediction[0]:,.2f}")

        st.markdown("---")
        st.write("### Model Input Summary")
        st.dataframe(input_df)
    except Exception as e:
        st.error(f"Prediction failed: {e}")
